#!/bin/bash
# Copyright 2024,2025 James D. Fischer
#
# <help_begin>
# NAME
#   git-update - performs `git pull' on branches develop and main
#
# SYNOPSYS
#   git-update [options] [dir]
#
# DESCRIPTION
#   git-update performs a `git pull' operation on branches `develop' and
#   `main', in that order.  If directory `dir' is specified on the command
#   line, git-update performs the `git pull' tasks within that directory.
#   Otherwise, the `git pull' tasks are performed within the current
#   directory.
#
# OPTIONS
#   -h, --help
#       Displays this script's help information.
#
#   -r, --restore-starting-branch
#       If this option is specified, the branch that is active prior to 
#       invoking git-update will continue to be the active branch after
#       git-update exits.  Otherwise, the 'develop' (if it exists) will be
#       the active branch when git-update exits.  If the repository does
#       not have a 'develop' branch, the 'main' branch will be active when
#       get-update exits.
#
# INSTALLATION
#   I recommend you use the following procedure to "install" this script:
#       1) $ test -d ~/.local/bin/ || mkdir -p ~/.local/bin/
#       2) $ ln -s ../../git/ece3220/bin/git-update ~/.local/bin/
#       3) Log out and log back in for these changes to take effect.
#
# NOTES
#   Within the Git repository, if the active branch, the develop branch, or
#   the main branch has unchanged and/or untracked files, those files are
#   stashed prior to switching to a different branch and/or performing 
#   'git pull' on the branch. Any stashed files are popped off the stash
#   after 'git pull' is performed on the branch.
#
# EXAMPLE
#       $ git update ~/git/ece3220
#       OR,
#       $ cd ~/git/ece3220
#       $ git update
#
# <help_end>
#
set -eu

#source /usr/local/libexec/eceugl-utils/trace

# Program paths
readonly BASENAME=/usr/bin/basename
readonly DIRNAME=/usr/bin/dirname
readonly GETOPT=/usr/bin/getopt
readonly GIT=/usr/bin/git
readonly PAGER=/usr/bin/less
readonly REALPATH=/usr/bin/realpath
readonly SED=/usr/bin/sed


SCRIPT_REALPATH="$("${REALPATH}" "$0")"
readonly SCRIPT_REALPATH

SCRIPT_NAME="$("${BASENAME}" "$SCRIPT_REALPATH")"
readonly SCRIPT_NAME

SCRIPT_DIR="$("${DIRNAME}" "$SCRIPT_REALPATH")"
readonly SCRIPT_DIR


#==========================================================================
# git_update()
#
# @param[in] git_repo_directory
# @param[in] restore_starting_branch (boolean, optional). Default value
#       is 'false'.
# 
# DESCRIPTION
#   For branches 'main'/'master' and 'develop' within the Git repository
#   located in the specified git_repo_directory, git_update performes these
#   tasks:
#   - git switch <branch>
#   - <stash any changed and/or untracked files>
#   - git pull
#   - <unstash any changed and/or untracked files>
#   - if restore_starting_branch is true, restores the starting branch
#
#==========================================================================

function git_update()
{
    local git_repo_directory="${1%/}"
    local restore_starting_branch="${2:-false}"
    local branch_name
    local current_branch_files_were_stashed
    local git_repo_directory_realpath
    local starting_branch
    local starting_branch_files_were_stashed

    # If the path string begins with a tilde character '~', replace the
    # tilde with the canonical path to the user's HOME directory.
    # See also:  https://stackoverflow.com/a/27485157/5051940
    git_repo_directory="${git_repo_directory/#\~/$HOME}"
    git_repo_directory_realpath="$("${REALPATH}" "$git_repo_directory")"

    echo
    echo "==============================================================="
    echo "  Processing: $git_repo_directory"
    if [[ "${git_repo_directory}" != "${git_repo_directory_realpath}" ]]; then
        echo "  Realpath  : $git_repo_directory_realpath"
    fi
    echo "==============================================================="

    if [[ ! -d "${git_repo_directory}" ]]; then
        >&2 echo ":: NOTICE :: Folder '${git_repo_directory}' does not exist."
        return
    elif [[ ! -d "${git_repo_directory}"/.git/ ]]; then
        >&2 echo ":: NOTICE :: Folder '${git_repo_directory}' does not contain a Git repository."
        return
    fi

    pushd "$git_repo_directory" >/dev/null || exit 1

    starting_branch="$("$GIT" branch --show-current)"

    # If the starting branch has changed or untracked files, stash them
    # before continuing.
    starting_branch_files_were_stashed=false
    if [[ $("$GIT" status --porcelain) ]]; then
        "$GIT" stash --include-untracked
        starting_branch_files_were_stashed=true
    fi

    "$GIT" fetch --all

    for branch_name in main master develop; do
        if "$GIT" show-ref --quiet refs/heads/${branch_name}; then
            if "$GIT" switch "${branch_name}"; then

                # CHECK: Does this branch have a remote branch?
                if ! "$GIT" branch -r | /usr/bin/grep "origin/${branch_name}" &>/dev/null; then
                    # This branch does not have a remote branch.
                    # Ignore this branch.
                    cat << MESSAGE_EOF
:: NOTE ::
Branch '${branch_name}' does not have a remote-tracking branch.  If you want to
update the files in your '${branch_name}' branch, use git-merge(1) or git-rebase(1)
to merge the contents of your main/master branch, for example, into your
'${branch_name}' branch.
MESSAGE_EOF
                    continue
                fi

                # If this branch has changed or untracked files, stash them.
                current_branch_files_were_stashed=false
                if [[ $("$GIT" status --porcelain) ]]; then
                    "$GIT" stash --include-untracked
                    current_branch_files_were_stashed=true
                fi

                "$GIT" pull

                if $current_branch_files_were_stashed; then
                    "$GIT" stash pop
                fi
            fi
        else
            case ${branch_name} in
            main | master ) : ;;
            *) >&2 echo ":: NOTICE :: Branch '${branch_name}' doesn't exist; skipping..." ;;
            esac
        fi
    done

    current_branch="$(/usr/bin/git rev-parse --abbrev-ref HEAD)"

    if $starting_branch_files_were_stashed; then
        if [ "$current_branch" != "$starting_branch" ]; then
            "$GIT" switch "$starting_branch"
            current_branch="$starting_branch"
        fi
        "$GIT" stash pop
    fi

    if [ "$restore_starting_branch" == "true" ]; then
        if [ "$current_branch" != "$starting_branch" ]; then
            "$GIT" switch "$starting_branch"
        fi
    else
        # If this repository has a branch named 'develop', select the
        # develop branch before returning from this function.
        if [ "$current_branch" != "develop" ]; then
            if "$GIT" show-ref --quiet refs/heads/develop; then
                "$GIT" switch develop
            fi
        fi
    fi

    popd >/dev/null || exit 1
}


#==========================================================================
# catch STDOUT STDERR cmd [args...]
# Captures simultaneously into variables STDOUT and STDERR the output sent
# to stdout and stderr, respectively, by the command `cmd'.
#
# I'm assuming the copyright holder for this code is the author of this
# post on StackOverflow.com: https://stackoverflow.com/a/41069638/5051940
#==========================================================================

function catch()
{
set +e
    eval "$({
    __2="$(
      { __1="$("${@:3}")"; } 2>&1;
      ret=$?;
      printf '%s=%q\n' "$1" "$__1" >&2;
      exit $ret
      )"
    ret=$?;
    printf '%s=%q\n' "$2" "$__2" >&2;
    printf 'return %q\n' "$ret" >&2;
    } 2>&1 )";
set -e
}


#==========================================================================
# ParseTheCommandLine() "$@"
#==========================================================================

function ParseTheCommandLine()
{
    # Parameter values for `lopts' and `sopts'
    # X   no operand
    # X:  required operand--e.g., -X required_value, --ex=required_value
    # X:: optional operand--e.g., -X  =OR=  -X value
    local lopts="help restore-starting-branch"
    local sopts="h r"
    local getopt_exit_code
    local getopt_stderr
    local getopt_stdout

set +e
    catch getopt_stdout getopt_stderr \
        "${GETOPT}" -o "${sopts}" -l "${lopts}" -a -n$-1 -s bash -- "$@"
    getopt_exit_code=$?
set -e

    if [[ $getopt_exit_code -ne 0 ]]; then
        >&2 echo ":: GETOPT ERROR :: ${getopt_stderr}"
        exit ${getopt_exit_code}
    fi

    eval set -- "${getopt_stdout}"

    while [[ $# -gt 0 ]]
    do
        case "$1" in
            -h|--help) cloHelpRequested=true; break ;;
            -r|--restore-starting-branch) cloRestoreStartingBranch=true ;;
            --) if [[ $# -ge 2 ]]; then cloGitRepoDirectory="${2}"; shift; fi ;;
            *) : ;; # unsupported -Y options
        esac
        shift
    done
}


#==========================================================================
#  main()
#==========================================================================

#--------------------------------------------------------------------------
#  Process the command line
#--------------------------------------------------------------------------

# The default git repository directory is the current working directory. 
cloGitRepoDirectory="$(/usr/bin/pwd)"
cloHelpRequested=false
cloRestoreStartingBranch=false

ParseTheCommandLine "$@"

#--------------------------------------------------------------------------
#  If the user requested help, display the help information and exit.
#--------------------------------------------------------------------------

if $cloHelpRequested; then
    export LESS="--quit-if-one-screen --prompt=\ Help for ${SCRIPT_NAME}\: ?ltline %lt?L/%L.:byte %bB?s/%s..?e (END):?pB %pB\%.. (press h for help or q to quit)\ "
    "${SED}" -n -e '/help_begin/,/help_end/{ /help_begin/d; /help_end/q; s/#\( \)\?//; p }' "$0" \
        | "${PAGER}"
    exit 0
fi

#--------------------------------------------------------------------------
#  Update the specified Git repository 
#--------------------------------------------------------------------------

git_update "$cloGitRepoDirectory" "$cloRestoreStartingBranch"

