#!/bin/bash
# NAME
#   git-update - performs `git pull' on branches develop and main
#
# SYNOPSYS
#   git-update [dir]
#
# DESCRIPTION
#   git-update performs a `git pull' operation on branches `develop' and
#   `main', in that order.  If a directory name `dir' is specified on the
#   command line, the `git pull' tasks are performed within that directory.
#   Otherwise, the `git pull' tasks are performed within the current
#   directory.
#
# INSTALLATION
#   I recommend you use the following procedure to "install" this script:
#       1) $ test -d ~/.local/bin/ || mkdir -p ~/.local/bin/
#       2) $ ln -s ~/git/ece3220/bin/git-update ~/.local/bin/
#       3) $ git config --global alias.update '!'"$HOME/.local/bin/git-update"
#
# NOTES
#   Within the local Git repository, if the main or develop branch has
#   unstaged changes, git-update will fail to update that branch.  You'll
#   need to either commit or stash the branch's unstaged changes prior to
#   invoking git-update.
#
# EXAMPLE
#   $ git update ~/git/ece3220
#   OR,
#   $ cd ~/git/ece3220
#   $ git update
#
set -eu

declare -r GIT=/usr/bin/git

#==========================================================================
#  git_checkout_branch()
#==========================================================================

function git_checkout_branch()
{
    local branch_name=$1
    local exit_value=0

    if "${GIT}" show-ref --quiet refs/heads/${branch_name}; then
        echo "Updating branch '${branch_name}'"
        "$GIT" checkout "${branch_name}"
    else
        >&2 echo ":: NOTICE :: This Git repository does not have a local branch named '${branch_name}'."
        >&2 echo "Skipping branch '${branch_name}'."
        exit_value=1
    fi
    return $exit_value
}


#==========================================================================
#  git_pull_branch()
#==========================================================================

function git_pull_branch()
{
    local branch_name=$1
    if git_checkout_branch "${branch_name}"; then
        "$GIT" pull
    fi
}


#==========================================================================
#  main()
#==========================================================================

# Save the name of the currently selected Git branch
saved_git_branch_name=$("${GIT}" branch --show-current)

if [[ $# -gt 0 ]]; then
    if [[ -d $1 ]]; then
        # [Note 1: Use the Bash shell's builtin command `cd' and not the
        # program /usr/bin/cd. --end note]
        cd "$1"
    else
        >&2 echo ":: ERROR ::  Directory '$1' does not exist."
        exit 1
    fi
fi

echo -n "Updating folder: "
pwd

git_pull_branch "develop"
git_pull_branch "main"

git_checkout_branch "${saved_git_branch_name}"

